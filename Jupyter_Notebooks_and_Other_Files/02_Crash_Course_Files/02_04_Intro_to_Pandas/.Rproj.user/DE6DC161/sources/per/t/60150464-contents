---
title: "'My First R Studio Notebook'"
output: html_notebook
---

# Objectives

For this first foray into R our goals are "relatively" simple.  

*   Get R & R Studio fired up on your laptop
*   Take a stab at working with "Markdown" in R Studio
*   Load some of the essential library's we'll be working with in this class
*   Do some basic statistical operations on a dataset
*   Make some ugly plots

#  Intro to RStudio (and Markdown)

RStudio is a workbench for creating and publishing code, text, figures, tables and graphics using R, Python and other scrioting environments.  

It is similar to the Jupyter Notebook framework that is now frequenty used with Python which accomplishes similar goals with similar resources.

One highlight of RStudio (and Jupyter) is the use of a publishing syntax called ["Markdown"](https://rmarkdown.rstudio.com) to create what will be "pretty" formatted text that can be then presented as HTML or other easily readable formats, providing a narrative to go with any code that is being written.  This includes the ability to use

*  Headers of various levels as with MS Word or HTML.
*  Bullet List
    +   Like this one!
*  HTML Hyperlinks and Links to Images
*  Block Quotes 
*  Equations using LaTeX
    +   If you don't know LaTeX Syntax, never fear.  There is a nice web-based tool that will help you here:
    +    [https://latex.codecogs.com/eqneditor/editor.php](https://latex.codecogs.com/eqneditor/editor.php)  (or just google "Latex Equation Editor," which is what I typically do.)

These features can be [pre]viewed in RStudios "Viewer" window (typically in the lower right corner of the interface) before being viewed as an output HTML or PDF file.  (The HTML files tend to be prettier from my experience)

The best way to learn Mathcad is for you to goof off with it and explore typing your own Twilight-Harry Potter Fan Fic or other prose, and I will leave that to you after we kick the tires of Markdown just a little in class before we get down to the biscuits and start playing with RStudio

# R Libraries for this activity

We aren't going to use all of these today but I DO want you to get these libraries ready to go.  Some of of these libraries will load a set of prerequsite libraries so it will kill more than one bird with one import command.

For starters let's install...

*  [tidyverse](https://www.tidyverse.org): A set of data science libraries loading the "metalibrary" "tidyverse" will automatically  load the core packages
    - [ggplot2](https://ggplot2.tidyverse.org) : Data Visualizations Using the Grammar of Graphics
    - [tibble](https://tibble.tidyverse.org) : Simplified Data Frames 
    - [tidyr](https://tidyr.tidyverse.org) : Tools for shepherding data in data frames
    - [readr](https://readr.tidyverse.org) : Tools for importing tabular data
    - [purrr](https://purrr.tidyverse.org) : Functional Programming Toolkit
    - [stringr](https://stringr.tidyverse.org) : Simple, Consistent Wrappers for Common String Operations
    - [forcats](https://forcats.tidyverse.org) : Tools for Working with Categorical Variables.  In R these are called "[factors](https://www.geeksforgeeks.org/r-factors/)."
 
You should also add another tidy library that is useful for time analysis and maniplulation:

*  [lubridate](https://lubridate.tidyverse.org) : time/date support functions

    
Later I recommend the following...  

*  [extRemes](https://cran.r-project.org/web/packages/extRemes/index.html) : NCAR Extreme Event Software for R ([Paper Link](https://www.jstatsoft.org/article/view/v072i08))
*  [tidync](https://cran.r-project.org/web/packages/tidync/index.html) : A Tidy Approach to 'NetCDF' Data Exploration and Extraction ([OpenSci Link](https://docs.ropensci.org/tidync/))
*  [rnoaa](https://cran.r-project.org/web/packages/rnoaa/index.html) : NOAA Data API for R ([OpenSci Link](https://docs.ropensci.org/rnoaa/))
*  [dataRetrieval](https://cran.r-project.org/web/packages/dataRetrieval/index.html) : Retrieval Functions for USGS and EPA Hydrologic and Water Quality Data ([Documentation Link](https://cran.r-project.org/web/packages/dataRetrieval/vignettes/dataRetrieval.html))

To pull a library, the command is just [library()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/library)


```{r}
########################################################
#
# Load Required R Libraries
#

library(package = "tidyverse", verbose = TRUE)
library(package = "lubridate", verbose = TRUE)

#
########################################################
```

#  Time to Kick Some Tires

## Our Dataset

Let's begin by accessing a dataset.  We will begin by just cracking open one that I have curated from NOAA's ~National Climatic Data Center (NCDC)~ National Center for Environmental Information (NCEI).

This dataset is the [NOAA Monthly U.S. Climate Divisional Database](https://www.ncei.noaa.gov/access/metadata/landing-page/bin/iso?id=gov.noaa.ncdc:C00005).  It is a [regionally aggregated](https://www.ncdc.noaa.gov/monitoring-references/maps/us-climate-divisions.php) climate dataset.  The map of the divisions are shown below.

![NCEI Climate Divisions](https://www.ncdc.noaa.gov/monitoring-content/monitoring-references/maps/images/us-climate-divisions.gif)
## Fetching a Dataset

We store a copy of this dataset on our [local THREDDS](http://kyrill.ias.sdsmt.edu:8080/thredds/catalog.html) server.  

But we can access them in R directly from the THREDDS HTTP service with the R [base::load()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/load) and [base::url()][https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/connections] functions

Later we will show you how to access various data services.  

```{r}
########################################################
#
# Load RData File of the nCLIMDIV Records saved at SD Mines
#

# Location of file on via SD Mines THREDDS HTTP Services 

Dataset_URL = "http://kyrill.ias.sdsmt.edu:8080/thredds/fileServer/CLASS_Examples/nCLIMDIV.Rdata"

load(file    = url(Dataset_URL),  # location of the file
     verbose = TRUE)              # entertain me while you do it!

#
########################################################
```

This dataset has pulled two fields -- specifically these are two tables (R mostly works with tabular data).

*  nCLIMDIV - our actual numbers in our datasets (along with the location information)
*  nCLIMDIV_Metadata - descriptions of the various fields in the dataset
*  nCLIMDIV_LUT - a reference table of Climate Division information

## Viewing Tables

If you have used plain R you know that you can look at the data with the print command.  It will look.... meh... like a plain old table on a comptuter display.  RStudio will output it as a "pretty" table but also one that you can scroll through.

These structures were originally "Data Frames" the new version is called "tibbles"

```{r}
########################################################
#
# Display the Data Metadata Table
#

print(nCLIMDIV_Metadata)

#
########################################################
```


Let's look at the lookup table for the climate divisions.  (This will be helpful shortly)


```{r}
########################################################
#
# Display the Climate Division Metadata Table
#

print(nCLIMDIV_LUT)

#
########################################################
```

(South Dakota is state code 39)

Finally, let's also look at the full data table.


```{r}
########################################################
#
# Display the Data 
#

print(nCLIMDIV)

#
########################################################
```
## Selecting PART of a dataset by rows

This is a large dataset above.  And we may only want to access a small amout of it, for example only get one climate zone.  

For this we need to "filter" a dataset by a given value in a table column.

We can do this by using some of the features in the "tidyverse" system and we're going to jump right to the ["dplyr" library](https://dplyr.tidyverse.org).  Dplyr is a syntax for manipulating dataframes.  

Here we are going to....

*  Make a new dataframe, let's call it *subset*...
*  ... based on our *nCLIMDIV* dataframe... 
*  ... and [dplyr::filter()](https://dplyr.tidyverse.org/reference/filter.html) it...
*  ... so that the retained dataframe satisfies the condition *Full_Zone_Code* = *my_target_value*

What makes using tidyverse R different than plain R is the use of structure called [pipes](https://style.tidyverse.org/pipes.html) which is symplified here by the characters **%>%**

```{r}
########################################################
#
# Use Dplyr's Filter feature to pull a single station.
#

target_zone = 3904

subset = nCLIMDIV %>% 
            filter(Full_Zone_Code == target_zone)

print(subset)

#
########################################################
```
You can also daisy chain filters, and other features with the pipes to create a solid and navigable work flow.

A few examples of other dplyr operations are

* [dplyr::select()](https://dplyr.tidyverse.org/reference/select.html) which will only store specific columns.
* [dplyr::mutate()](https://dplyr.tidyverse.org/reference/mutate.html) which will modify existing columns or add new one
* [dplyr::arrange()](https://dplyr.tidyverse.org/reference/arrange.html) which modifies row order (e.g., sorting)

and also 

* [dplyr::group_by()](https://dplyr.tidyverse.org/reference/group_by.html) which will partition a data frame by specific column value sets (for example grouping by station or grouping by year or month)
* [dplyr::summarize()](https://dplyr.tidyverse.org/reference/summarise.html) which reduces a data frame to a single value (useful for taking an average, sum, max or min).  We'll use this alot with group_by.
* [dplyr::ungroup()](https://dplyr.tidyverse.org/reference/group_by.html) Reverses the group_by command 

Let's do an example of this by aggregating our data by year.  To do this we will also have to calculate the year from the date field.  This is function uses the [lubridate::year()](https://lubridate.tidyverse.org/reference/year.html) function in the [lubridate](https://lubridate.tidyverse.org/index.html) package.

```{r}
########################################################
#
# Use Dplyr's Filter feature to pull a single station and
#  Aggregate by year for various parameters in the frame... 
#

target_zone = 3904

subset_yearly = nCLIMDIV %>%
  filter(Full_Zone_Code == target_zone) %>% # isolate the division
  group_by(Year = year(Date))           %>% # group by year (w/ a new variable)
  summarize(TMPC_A = mean(TMPC),
            TMAX_A = mean(TMAX),
            TMIN_A = mean(TMIN),
            PCPN_A = sum(PCPN),
            HDDC_A = sum(HDDC),
            CDDC_A = sum(CDDC)) %>%
  ungroup()

print(subset_yearly)

#
########################################################

```

Notice that the above table removes any parameter not requested.

We can also be clever and break up our datasets by month and period.

Let's get fancy and break our dataset up into groups by month and two 30-yr periods:

1951-1980 and 1991-2020




```{r}
########################################################
#
# Use Dplyr's Filter feature to pull a single station and
#  Aggregate by month for various parameters in the for two time periods frame... 
#

target_zone = 3904

subset_period_monthly = nCLIMDIV        %>% # original dataframe
  filter(Full_Zone_Code == target_zone) %>% # isolate the division
  mutate(Year  =  year(x = Date),
         Month = month(x = Date, 
                       label = TRUE, 
                       abbr  = TRUE))   %>% # add two variables
  mutate(Period = ifelse( (Year >= 1951) & (Year <= 1980), "1951-1980",
                  ifelse( (Year >= 1991) & (Year <= 2021), "1991-2021",
                   "Delete_Me")))       %>% # add a period variable with an if block
  filter(Period != "Delete_Me")         %>% # nuke unwanted records
  group_by(Period, Month)               %>% # group by year (w/ a new variable)
  summarize(TMPC_M = mean(TMPC),            # aggregate select columns
            TMAX_M = mean(TMAX),
            TMIN_M = mean(TMIN),
            PCPN_M = mean(PCPN),
            HDDC_M = mean(HDDC),
            CDDC_M = mean(CDDC)) 

print(subset_period_monthly)

#
########################################################

```

# Plot the data

If you've worked with R before, you may be familiar with some of the plotting functions such as [graphics::plot()](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/plot)


```{r}
########################################################
#
# Plain Jane Plotting in R... 
#   Note the $ is used to pull a column from a given data frame
#

plot(x    = subset_yearly$Year,                       # your X
     y    = subset_yearly$TMPC_A,                     # your Y
     type = "l",                                      # what kind of plot (l = "line plot")
     col  = "grey",                                   # color
     main = "Plain Line Plot for Yearly Temperature", # main title
     sub  = "Black Hills, SD",                        # a bottom label 
     xlab = "Year",                                   # x axis label 
     ylab = "Mean Monthly Tempeature (deg C)",        # y axis label
     ylim = c(min(subset_yearly$TMIN_A),              # manually lock
              max(subset_yearly$TMAX_A)))             #  axis ranges.

# Now add to additional line traces using similar syntax.

lines(x    = subset_yearly$Year,
      y    = subset_yearly$TMAX_A, 
      col  = "red", 
      type = "l")

lines(x    = subset_yearly$Year,
      y    = subset_yearly$TMIN_A, 
      col  ="blue", 
      type ="l")

legend("topleft", 
       legend = c("Tmean", "Tmax", "Tmin"),
       col    = c( "grey",  "red", "blue"))
#
########################################################
```

There are couple problems here since there are a large number of different kinds of plots with many with slightly & passive-aggressively different syntax.  


For example, let's take the monthly period dataset from two periods and try making a bar plot of mean monthly rainfall.


```{r}
########################################################
#
# A fugly barplot that will be improved on next time!
#   (the text below will explain that confusing first line...)

barplot(formula = PCPN_M ~ Period + Month, # "formula" - to be explained below
        data    = subset_period_monthly,   # the columns in the formula's dataframe
        beside  = TRUE,                    # Don't make a stacked bar plot
        legend  = TRUE,                    # Add a legend
        ylab    = "Monthly Rainfall (mm)", # Y Label
        xlab    = "Month")                 # X Label
#
# For a "formula" it implies there is a dependent value (LHS)
#    is a function of a set of independent values (RHS)
#    on the right hand side, the first listed parameter is
#    the series of bars (which can be stacked or put side by
#    side).  The last one is the x axis for the bar plot.
#
########################################################
```
OK well that didn't make alot of sense especialy that "formula" thing... 

It would be nice for a more intuitive (even if it means typing more) way to do this for most types of graphs.

And better still it would be nice to have somewhat nicer looking graphics...

There is an answer to this:

# Plotting the Graphics Tidy Style

To get around part of this problem, the cult of Tidy tapped another cult:

## ["The Grammar of Graphics"](https://towardsdatascience.com/a-comprehensive-guide-to-the-grammar-of-graphics-for-effective-visualization-of-multi-dimensional-1f92b4ed4149)

If it sounds like a buzzword that will send your prof's eyes rolling, you would not be wrong.

It can also be very confusing when doing this at first because elements of a plot are chained along with addition (+) type math.  It IS however a more consistant way plot than all the different flavors of graphics in the base version of R.

### SLOOOOWWWWLLLLLYYY Making a Simple Plot (Histogram Edition)

In tis section, I'm going to do this one tiny step at a time until we get to a viable product. (This is how I work through cryptic procedures so I can see what each little additional mystery thingie does.)

Graphing is invoked by the [ggplot2](https://ggplot2.tidyverse.org) command.. which has a heluvalot under its hood! For me all that detail was what had me a little shy to adopt this way of printing data.

Tidyverse uses what is sometimes called the ["grammar of graphics"](https://ramnathv.github.io/pycon2014-r/visualize/ggplot2.html) method... to make a long story longer, the GoG presents separate commands to do separate things rather bundle stuff in a single graphing function. Sometimes it makes a lot of sense... other times it may be confusion. (Hence me demonstrating making a graph this one tiny step at a time!

First thing we are going to do is open a plotting space with the command [ggplot2::ggplot()](https://ggplot2.tidyverse.org/reference/ggplot.html)

```{r}
########################################################
#
# invoke the ggplot plotting environmnent.
#

ggplot() 

#
########################################################
```


Wow. We have a... big square of... grey. All it's doing is setting up our plot environment... so let's do some more...

If we want to do a histogram we are going to have to tell it what we want to print and where to get the stuff

When we add things to a plot command in Tidyverse we "add" to the steps incrementally.

This involves a "mapping" function called "[ggplot2::aes](https://ggplot2.tidyverse.org/reference/aes.html)" (short for aesthetics)

here, we are working with the data frame "subset_period_monthly" and are working on the Average Annual Temperature (TMPC_A) which we are tossing onto the x axis because that's where the bins of temperature go!

```{r}
########################################################
#
# Adding "Asthetics" (for axes along with shape, color and fill labeling)
#

ggplot(data = subset_yearly) + # EDIT:  invoke graphics environment using a given dataframe
  
  aes(x    = TMPC_A)                    # NEW: select variable to print... You can get really fancy here later

#
########################################################
```

OK now we have something that looks like we may have the making of the graph. If you don't like grey outlines and white grids, no worries, we can change that shortly.

OK.. we are now ready to make a histogram...

Here we will use one of the gglot2's "geom\_\*" (draw stuff) resources. The default should work for us here.

```{r}
########################################################
#
# Adding a "geometry" (drawing some data!)
#

ggplot(data = subset_yearly) +   # invoke graphics environment using a given dataframe
  
  aes(x = TMPC_A)   +            # select variable to print... You can get really fancy here later

  geom_histogram()               # NEW: insert histogram

#
########################################################
```

(you may have gotten a warning about using the bin=X, you can adjust it.)

Now quickly before moving on... I am not keen on the grey background with white lines.

There are a number of out-of-the-box ["themes"](https://ggplot2.tidyverse.org/reference/ggtheme.html) for ggplot2.

I'm partial to theme_bw() and theme_light() but try the ones that you prefer or stick with the default, theme_gray().

These plots shown here are mine. You should fidget about so they are *yours* and so you can adapt to this new way of working with data.

```{r}
########################################################
#
# Changing Themes 
#

ggplot(data = subset_yearly) +   # invoke graphics environment using a given dataframe
  
  aes(x = TMPC_A)   +            # select variable to print... You can get really fancy here later

  theme_bw() +                   # NEW: changing the plotting theme
    
  geom_histogram()               # insert histogram

#
########################################################
```

We don't really need this here.  But you may want to override axis ranges.

We can fix that with [ggplot2::xlim() or ggplot2::ylim()](https://ggplot2.tidyverse.org/reference/lims.html)

```{r}
########################################################
#
# Setting Axes
#

ggplot(data = subset_yearly) +   # invoke graphics environment using a given dataframe
  
  aes(x = TMPC_A)   +            # select variable to print... You can get really fancy here later

  theme_bw() +                   # changing the plotting theme
  
  xlim( 0, 10 ) +                # NEW: adding x-axis limits

  geom_histogram()               # insert histogram

#
########################################################
```


How about changing the color of the fill in the bars...

Filling the colors uses "fill", setting the line color is "color"

You can use a single value by putting the fill or color argument in the geom*

[You really don't want to know about all the colors you can use.](https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/colorPaletteCheatsheet.pdf)

```{r}
########################################################
#
# Using some color
#

ggplot(data = subset_yearly) +   # invoke graphics environment using a given dataframe
  
  aes(x = TMPC_A)   +            # select variable to print... You can get really fancy here later

  theme_bw() +                   # changing the plotting theme
  
  xlim( 0, 10 ) +                #adding x-axis limits

  geom_histogram(fill = "red")   # EDIT: insert histogram (with a chosen color)

#
########################################################
```


Want to customize the labels and titles so we can have units?

You can add custom labels and titles! (<https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/colorPaletteCheatsheet.pdf>)



```{r}
########################################################
#
# Adding Labels
#

ggplot(data = subset_yearly) +   # invoke graphics environment using a given dataframe
  
  aes(x = TMPC_A)   +            # select variable to print... You can get really fancy here later

  theme_bw() +                   # changing the plotting theme
  
  xlim( 0, 10 ) +                # adding x-axis limits

  geom_histogram(fill = "red") + # insert histogram (with a chosen color)

  ggtitle(label    = "NCEU Climate Division Data",          # NEW : Custom Title
          subtitle = "Black Hills, SD, Climate Division") + # NEW : Custom Title
  
  xlab('Mean Monthly Temperature (°C)') + # NEW : Custom Axis Label
  ylab('Count')  # NEW : Custom Axis Label

#
########################################################
```

And I could keep tweaking this graph all day, but good enough is good enough so this is a good place to stop...

### Multiplots (Facets)

Let's now take our temperature plot and try another kind of plot.  We will be doing a lot of side-by-side comparisons where having two or more plots on a single figure may be a good thing.

We'll back track our plot though a couple steps (removing the axis control)


```{r}
########################################################
#
# Taking out the color and the x-limits
#

ggplot(data = subset_yearly) +   # invoke graphics environment using a given dataframe
  
  aes(x = TMPC_A)   +            # select variable to print... You can get really fancy here later

  theme_bw() +                   # changing the plotting theme
  
  geom_histogram()               + # Edit: insert histogram (default color)

  ggtitle(label    = "NCEU Climate Division Data",          # Custom Title
          subtitle = "Black Hills, SD, Climate Division") + # Custom Title
  
  xlab('Mean Monthly Temperature (°C)') + #  Custom Axis Label
  ylab('Count')                           #  Custom Axis Label

#
########################################################
```


We happen to have a data frame that is breaking things down by 30-year periods

```{r}
########################################################
#
# Display our Period Monthy Averages.
#

print(subset_period_monthly)

#
########################################################
```

We can make a couple edits by swapping out our dataset and the name of the variables (since it's _M and not _A)

We will also use a column plot.

```{r}
########################################################
#
# Taking out the color and the x-limits
#

ggplot(data = subset_period_monthly) +   # Edit: new Dataset
  
  aes(x =  Month,              # Edit: Patch for the Mean Monthy Temp
      y = TMPC_M) +            

  theme_bw() +                   # changing the plotting theme
  
  geom_col()               + # Edit: change to a column plot

  ggtitle(label    = "NCEU Climate Division Data",          # Custom Title
          subtitle = "Black Hills, SD, Climate Division") + # Custom Title
  
  xlab('Month') +                        #  Custom Axis Label
  ylab('Mean Monthly Temperature (°C)')  #  Custom Axis Label

#
########################################################
```


Now for some fun.  Let's color our columns so that our early and late periods have two different colors!

```{r}
########################################################
#
# Taking out the color and the x-limits
#

ggplot(data = subset_period_monthly) +   # Edit: new Dataset
  
  aes(x    =  Month,            # Edit: Color By Period
      y    = TMPC_M,
      fill = Period) +            

  theme_bw() +                   # changing the plotting theme
  
  geom_col() +                   # Edit: change to a column plot

  ggtitle(label    = "NCEU Climate Division Data",          # Custom Title
          subtitle = "Black Hills, SD, Climate Division") + # Custom Title
  
  xlab('Mean Monthly Temperature (°C)') + #  Custom Axis Label
  ylab('Count')                           #  Custom Axis Label

#
########################################################
```

Poopie! The default for a column plot is to stack everything.  

To do a side by side use "dodge" for the position in the geom argument.


```{r}
########################################################
#
# Taking out the color and the x-limits
#

ggplot(data = subset_period_monthly) +   # Edit: new Dataset
  
  aes(x    =  Month,            # Edit: Color By Period
      y    = TMPC_M,
      fill = Period) +            

  theme_bw() +                   # changing the plotting theme
  
  geom_col(position = "dodge") +        # Edit: change to side by side

  ggtitle(label    = "NCEU Climate Division Data",          # Custom Title
          subtitle = "Black Hills, SD, Climate Division") + # Custom Title
  
  xlab('Mean Monthly Temperature (°C)') + #  Custom Axis Label
  ylab('Count')                           #  Custom Axis Label

#
########################################################
```

For me that looks clutter and I;d rather have them side by side in two similar graphs.

This is where we use "facets"  You can arrange your subplots ("axes" in python) by two variables (one for the x and one for the y) with [ggplot2::facet_grid](https://ggplot2.tidyverse.org/reference/facet_grid.html) or just string them along with [ggplot2::facet_wrap](https://ggplot2.tidyverse.org/reference/facet_wrap.html) ...


```{r}
########################################################
#
# Taking out the color and the x-limits
#

ggplot(data = subset_period_monthly) +   # Edit: new Dataset
  
  aes(x    =  Month,            # Edit: Color By Period
      y    = TMPC_M,
      fill = Period) +       
  
  facet_wrap(~Period,
             nrow = 1, 
             ncol = 2)  +

  theme_bw() +                   # changing the plotting theme
  
  geom_col(position = "dodge2") + # adding a column plot

  ggtitle(label    = "NCEU Climate Division Data",          # Custom Title
          subtitle = "Black Hills, SD, Climate Division") + # Custom Title
  
  xlab('Mean Monthly Temperature (°C)') + #  Custom Axis Label
  ylab('Count')                           #  Custom Axis Label

#
########################################################
```